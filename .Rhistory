makeCacheMatrix <- function(x = matrix()) {
m <- NULL
y <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() {x }
setsolveX <- function(solve) m <<- solve
getsolveX <- function() m
list(set = set, get = get,
setsolveX = setsolveX,
getsolveX = getsolveX)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolveX()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
x$set(data)
m <- solve(data, ...)
x$setsolveX(m)
m
}
x <- matrix(data = c(14, 42, 7, 9), 2, 2)
cacheSolve(y)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
y <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolveX <- function(solve) m <<- solve
getsolveX <- function() m
list(set = set, get = get,
setsolveX = setsolveX,
getsolveX = getsolveX)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolveX()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
x$set(data)
m <- solve(data, ...)
x$setsolveX(m)
m
}
x <- matrix(data = c(14, 42, 7, 9), 2, 2)
cacheSolve(y)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
y <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() {x }
setsolveX <- function(solve) m <<- solve
getsolveX <- function() m
list(set = set, get = get,
setsolveX = setsolveX,
getsolveX = getsolveX)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolveX()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
x$set(data)
m <- solve(data, ...)
x$setsolveX(m)
m
}
x <- matrix(data = c(14, 42, 7, 9), 2, 2)
y <- makeCacheMatrix(x)
cacheSolve(y)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
##y <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() {x }
setsolveX <- function(solve) m <<- solve
getsolveX <- function() m
list(set = set, get = get,
setsolveX = setsolveX,
getsolveX = getsolveX)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolveX()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
x$set(data)
m <- solve(data, ...)
x$setsolveX(m)
m
}
x <- matrix(data = c(14, 42, 7, 9), 2, 2)
y <- makeCacheMatrix(x)
cacheSolve(y)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
##y <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() {x }
setsolveX <- function(solve) m <<- solve
getsolveX <- function() m
list(set = set, get = get,
setsolveX = setsolveX,
getsolveX = getsolveX)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolveX()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
x$set(data)
m <- solve(data, ...)
x$setsolveX(m)
m
}
x <- matrix(data = c(14, 42, 7, 9), 2, 2)
y <- makeCacheMatrix(x)
cacheSolve(y)
makeCacheMatrix <- function(x = matrix()) {
## During a call:
##
## 1. Set the 'cache' value to NULL
## 2. Create 4 functions to access this call's matrix and cache.
## 3. Return a list of those 4 functions on those values.
cache <- NULL
## Set this object to a different matrix and "clear" the cache.
##
set <- function(y) {
x <<- y
cache <<- NULL
}
## Get the matrix.
##
get <- function() {
x
}
## Set the cache value.
##
setCache <- function(objectToCache) {
cache <<- objectToCache
}
## Get the cache value.
##
getCache <- function() {
cache
}
## Return a list of the above 4 functions
## to access this call's matrix and cache.
##
list(set=set,
get=get,
setCache=setCache,
getCache=getCache)
}
## This function computes the inverse of the special "matrix" returned by
## makeCacheMatrix, above. If the inverse has already been calculated
## (and the matrix has not changed), then the cachesolve should retrieve
## the inverse from the cache.
##
## INPUT: a square invertible matrix
## OUTPUT: the inverse of the input matrix
##
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x',
## but only calculate if the solution is not already cached.
## Get the current cache, intended to store the inverse.
##
inv <- x$getCache()
## If it is not NULL: return the inverse.
##
if (!is.null(inv)) {
return(inv)
}
## Otherwise: calculate, cache, and return the inverse.
##
inv <- solve(x$get())
x$setCache(inv)
inv
}
x <- matrix(data - c(4,2,7,6),2,2)
x <- matrix(x$get - c(4,2,7,6),2,2)
